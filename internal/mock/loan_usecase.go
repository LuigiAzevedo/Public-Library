// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/usecase/loan_usecase.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/LuigiAzevedo/public-library-v2/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockLoanUsecase is a mock of LoanUsecase interface.
type MockLoanUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLoanUsecaseMockRecorder
}

// MockLoanUsecaseMockRecorder is the mock recorder for MockLoanUsecase.
type MockLoanUsecaseMockRecorder struct {
	mock *MockLoanUsecase
}

// NewMockLoanUsecase creates a new mock instance.
func NewMockLoanUsecase(ctrl *gomock.Controller) *MockLoanUsecase {
	mock := &MockLoanUsecase{ctrl: ctrl}
	mock.recorder = &MockLoanUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanUsecase) EXPECT() *MockLoanUsecaseMockRecorder {
	return m.recorder
}

// BorrowBook mocks base method.
func (m *MockLoanUsecase) BorrowBook(ctx context.Context, userID, bookID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BorrowBook", ctx, userID, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BorrowBook indicates an expected call of BorrowBook.
func (mr *MockLoanUsecaseMockRecorder) BorrowBook(ctx, userID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BorrowBook", reflect.TypeOf((*MockLoanUsecase)(nil).BorrowBook), ctx, userID, bookID)
}

// ReturnBook mocks base method.
func (m *MockLoanUsecase) ReturnBook(ctx context.Context, userID, bookID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnBook", ctx, userID, bookID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnBook indicates an expected call of ReturnBook.
func (mr *MockLoanUsecaseMockRecorder) ReturnBook(ctx, userID, bookID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnBook", reflect.TypeOf((*MockLoanUsecase)(nil).ReturnBook), ctx, userID, bookID)
}

// SearchUserLoans mocks base method.
func (m *MockLoanUsecase) SearchUserLoans(ctx context.Context, userID int) ([]*entity.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchUserLoans", ctx, userID)
	ret0, _ := ret[0].([]*entity.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchUserLoans indicates an expected call of SearchUserLoans.
func (mr *MockLoanUsecaseMockRecorder) SearchUserLoans(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchUserLoans", reflect.TypeOf((*MockLoanUsecase)(nil).SearchUserLoans), ctx, userID)
}
